var request = require("request");
var Q = require("q");
var utils = require('./utils');

/**
 * Find a container by id.
 * 
 * @param {String} containerId
 * @return {Promise}
 */
function get(containerId) {
    var deferred = Q.defer();
    request({
        url: utils.getAPIUrl("container"),
        qs: {
            id: containerId,
            apiKey: utils.getAPIkey()
        },
        method: 'GET',
        json: true
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

/**
 * Creates a new container.
 * 
 * @params {Object} options
 * @return {Promise}
 */
function post(container) {
    var deferred = Q.defer();

    request({
        url: utils.getAPIUrl("container"),
        method: 'POST',
        json: {
            apiKey: utils.getAPIkey(),
            customerId: container.customerId,
            parentId: container.parentId,
            name: container.name,
            realName: container.realName,
            type: container.type,
            createNotify: container.createNotify,
            maxHeartbeatTimeout: container.maxHeartbeatTimeout,
            action: container.action,
            system: container.system,
            additional: container.additional
        }
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

function put(container) {
    var deferred = Q.defer();

    request({
        url: utils.getAPIUrl("container"),
        method: 'PUT',
        json: {
            apiKey: utils.getAPIkey(),
            realName: container.realName,
            maxHeartbeatTimeout: container.maxHeartbeatTimeout,
            action: container.action,
            system: container.system,
            additional: container.additional
        }
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

function getAll(parentId) {
    var deferred = Q.defer();

    if (utils.isString(parentId)) {
        request({
            url: getAPIUrl("container/all", parentId),
            method: 'GET',
            json: true
        }, function (err, res, body) {
            utils.apiCB(deferred, err, res, body);
        });
    } else {
        deferred.reject("ParentId must be a string");
    }

    return deferred.promise;
}

function inventory(containerId) {
    var deferred = Q.defer();

    if (utils.isString(containerId)) {
        request({
            url: utils.getAPIUrl("container/inventory", containerId),
            method: 'GET'
        }, function (err, res, body) {
            utils.apiCB(deferred, err, res, body);
        });
    } else {
        deferred.reject("ContainerId must be a string");
    }
    return deferred.promise;
}

(function ($) {
    $.get = get;
    $.post = post;
    $.put = put;
    $.getAll = getAll;
    $.install = "installFKT";
    $.inventory = inventory;
})(exports);