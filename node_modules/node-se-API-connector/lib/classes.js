var os = require("os");
var utils = require('./utils');
var agentTypes = Object.freeze([
    "EXTERNAL-NETWORK",
    "EXTERNAL-SOFTWARE",
    "EXTERNAL-HARDWARE"
]);

function Agent(parentId, type, name, settings){
    if(utils.isString(parentId))
        this.parentId = parentId;
    if(utils.isString(type)){
        if(agentTypes.indexOf(type) >= 0){
            this.type = type;
        }
    }
    if(utils.isString(name))
        this.name = name;
    
    if(settings){
        if(utils.isObject(settings))
            this.settings = [settings];
        if(utils.isArray(settings))
            this.settings = settings;
    }
}

function AgentSetting(key,value,orderInt,editable,definition){
    if(utils.isString(key))
        this.key = key;
    if(utils.isString(value))
        this.value = value;
    if(utils.isNumber(orderInt))
        this.orderInt = orderInt | 0;
    if(utils.isBoolean(editable))
        this.editable = editable;
    if(utils.isString(definition))
        this.definition = definition;
}

function RsmData(key, version, state, data){
    this.key = key;
    if(utils.isNumber(version)){
        this.version = version | 0;
    } else {
        this.version = 1;
    }
    this.state = state;
    this.data = data;
};

function NotifyMessage(guid, error, message, rsm){
    if(utils.isString(guid))
        this.guid = guid;
    if(utils.isBoolean(error)){
        this.error = error;
    } else {
        this.error = true;
    }
    if(utils.isString(message))
        this.message = message;
    if(utils.isObject(rsm)){
        this.rsm = rsm;
    }
    this.utcMs = new Date().getTime();
}

function Container(customerId, name, realName, type){
    if(utils.isString(customerId))
        this.customerId = customerId;
    if(utils.isString(customerId))
        this.name = name;
    if(utils.isString(customerId))
        this.realName = realName;
    if(utils.isNumber(type)){
        this.type = type | 0;
    }else{
        this.type = 4;
    }
    
    this.system = {
        //TODO: get public IP from os.interfaces()
        ip: null,
        isServer: false,
        isVm: false,
        numberOfProcessors: os.cpus().length,
        totalRam: os.totalmem(),
        architecture: os.arch()
    };
    
    var lastStart = new Date();
    lastStart.setSeconds(lastStart.getSeconds() - (os.uptime() | 0));
    
    this.additional = {
        name: os.hostname(),
        version: os.release(),
        servicepack:"",
        lastStart: lastStart.getTime()
    };
    
    this.maxHeartbeatTimeout= 20;
}

(function($){
    $.Agent = Agent;
    $.AgentSetting = AgentSetting;
    $.RsmData = RsmData;
    $.NotifyMessage = NotifyMessage;
    $.Container = Container;
})(exports);