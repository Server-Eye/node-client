var request = require("request");
var Q = require("q");
var utils = require('./utils');

/**
 * Find an agent by id.
 * 
 * @param {String} agentId
 * @return {Promise}
 */
function get(agentId) {
    var deferred = Q.defer();
    request({
        url: utils.getAPIUrl("agent"),
        qs: {
            id: agentId,
            apiKey: utils.getAPIkey()
        },
        method: 'GET',
        json: true
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

function create(options) {
    var deferred = Q.defer();
    request({
        url: utils.getAPIUrl("agent"),
        method: 'POST',
        json: {
            parentId: options.parentId,
            type: options.type,
            name: options.name,
            settings: options.settings
        }
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

function update(agentId, settings) {
    var deferred = Q.defer();
    request({
        url: utils.getAPIUrl("agent"),
        method: 'PUT',
        json: {
            id: agentId,
            settings: settings
        }
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });

    return deferred.promise;
}

function getAll(containerId) {
    var deferred = Q.defer();

    if (utils.isString(containerId)) {
        request({
            url: utils.getAPIUrl("agent", "all", containerId),
            method: 'GET'
        }, function (err, res, body) {
            utils.apiCB(deferred, err, res, body);
        });
    } else {
        deferred.reject("containerId must be a string");
    }

    return deferred.promise;
}

function notify(agentId, containerId, msg) {
    var deferred = Q.defer();
    var includesRsm = false;
    if (utils.isObject(msg.rsm)) {
        includesRsm = true;
    }
    request({
        url: utils.getAPIUrl("agent", agentId, "notify"),
        method: 'POST',
        json: {
            containerId: containerId,
            msg: msg,
            rsm: includesRsm
        }
    }, function (err, res, body) {
        utils.apiCB(deferred, err, res, body);
    });
    return deferred.promise;
}

(function ($) {
    $.get = get;
    $.create = create;
    $.update = update;
    $.getAll = getAll;
    $.notify = notify;
})(exports);